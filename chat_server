import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import json
import requests
import os

urls = { "token":"https://suap.ifrn.edu.br/api/v2/autenticacao/token/",
         "dados":"https://suap.ifrn.edu.br/api/v2/minhas-informacoes/meus-dados/"}



usuario_s =  input('digite sua matricula do suap:' )
senha_s = input('digite sua senha do suap:' )


autenticacao = {
    "username": usuario_s,
    "password": senha_s
}


send_token = requests.post(urls['token'], data=autenticacao)
if send_token.status_code == 200:
	resp_send_token = json.loads(send_token.content.decode('utf-8'))['token']


cabecalho={'Authorization': 'JWT {0}'.format(resp_send_token)}


send_data = requests.get(urls['dados'], headers=cabecalho)
if send_data.status_code == 200:
	resp_data = send_data.content.decode('utf-8')

informacoes = json.loads(resp_data)


if informacoes['tipo_vinculo'] == 'Aluno' :
	try:
		conn = psycopg2.connect("dbname=postgres user=postgres host=localhost")
		conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
		cur = conn.cursor()
		print('Usuario Postgres conectado ao banco postgres')
	except psycopg2.OperationalError:
		print('Erro ao conectar o usuario postgres e banco postgres')
	

	try:	
		cur.execute("CREATE DATABASE alunos")
		conn.commit()
		cur.close()
		conn.close()
		print('Banco Alunos criados')
	except psycopg2.ProgrammingError :
		print('Erro ao criar Banco alunos')
	

	try:
		conn = psycopg2.connect("dbname=alunos user=postgres host=localhost")
		conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
		cur = conn.cursor()
		print('Conectando no banco alunos')
	except psycopg2.OperationalError:
		print('Erro ao conectar no banco alunos')
	

	try:
		cur.execute("CREATE TABLE alunos (matricula BIGINT PRIMARY KEY, nome VARCHAR(100), curso VARCHAR(200), campus VARCHAR(300), email VARCHAR(400), vinculo VARCHAR(500));")
		print('Criando tabela alunos')
	except psycopg2.ProgrammingError:
		print('Tabela alunos já existe') 
	

	try:
		cur.execute("INSERT INTO alunos (matricula, nome, curso, campus, email, vinculo) VALUES (%s,%s,%s,%s,%s,%s);", (informacoes['matricula'], informacoes['nome_usual'], informacoes['vinculo']['curso'], informacoes['vinculo']['campus'], informacoes['email'], informacoes['tipo_vinculo']))
		conn.commit()
		cur.close()					
		conn.close()
		print('Inserindo dados na tabela...\n')
		print('Feito')
	except psycopg2.IntegrityError:
		print ('aluno já cadastrado')




if informacoes['tipo_vinculo'] == 'Servidor' :
	try:
		conn = psycopg2.connect("dbname=postgres user=postgres host=localhost")
		conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
		cur = conn.cursor()
		print('Usuario Postgres conectado ao banco postgres')
	except psycopg2.OperationalError:
		print('Erro ao conectar o usuario postgres e banco postgres')


	try:	
		cur.execute("CREATE DATABASE servidor")
		conn.commit()
		cur.close()
		conn.close()
		print('Banco Servidor criado')
	except psycopg2.ProgrammingError :
		print('Erro ao criar Banco Servidor')
			

	try:
		conn = psycopg2.connect("dbname=servidor user=postgres host=localhost")
		conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
		cur = conn.cursor()
		print('Conectando no banco Servidor')
	except psycopg2.OperationalError:
		print('Erro ao conectar no banco Servidor')
		


	try:
		cur.execute("CREATE TABLE servidor (matricula BIGINT PRIMARY KEY, nome VARCHAR(100), curso VARCHAR(200), campus VARCHAR(300), email VARCHAR(400), vinculo VARCHAR(500));")
		print('Criando tabela alunos')
	except psycopg2.ProgrammingError:
		print('Tabela Servidor já existe')
		

	try:
		cur.execute("INSERT INTO servidor (matricula, nome, curso, campus, email, vinculo) VALUES (%s,%s,%s,%s,%s,%s);", (informacoes['matricula'], informacoes['nome_usual'], informacoes['vinculo']['cargo'], informacoes['vinculo']['campus'], informacoes['email'], informacoes['tipo_vinculo']))
		conn.commit()
		cur.close()					
		conn.close()
		print('Inserindo dados na tabela...\n')
		print('Feito')
	except psycopg2.IntegrityError:
		print ('Servidor ja cadastrado')





ver = input('Deseja ver o banco de dados [S/N]?' )
os.system('clear')

if ver == 's' or 'S' or 'sim' or 'SIM':
	banco = input('Qual banco? [alunos,servidor]:' )
	if banco == 'alunos':
		try:
			conection = psycopg2.connect("dbname=alunos user=postgres host=localhost")
			cur_conn = conection.cursor()
			cur_conn.execute("select * from alunos")
			banco = cur_conn.fetchall()
			for data in banco:
				print(data)
				conection.close()
		except Exception as e:
			print(e)
	
	if banco == 'servidor':
		try:
			conection = psycopg2.connect("dbname=servidor user=postgres host=localhost")
			cur_conn = conection.cursor()
			cur_conn.execute("select * from servidor")
			banco = cur_conn.fetchall()
			for data in banco:
				print(data)
				conection.close()
		except Exception as e:
			print(e)

else:
	print('Programa encerrado.')
		
